geom_density(adjust=1.5, alpha=.4)
p2
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)
# The diamonds dataset is natively available with R.
# With transparency (right)
p2 <- ggplot(data=df, aes(x=Government.consumption, group=alliance, colour = alliance)) +
geom_density(adjust=1.5, alpha=.4)
p2
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)
# The diamonds dataset is natively available with R.
# With transparency (right)
p2 <- ggplot(data=df, aes(x=Size.of.Government, group=alliance, colour = alliance)) +
geom_density(adjust=1.5, alpha=.4)
p2
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)
# The diamonds dataset is natively available with R.
# With transparency (right)
p2 <- ggplot(data=df, aes(x=Legal.System...Property.Rights, group=alliance, colour = alliance)) +
geom_density(adjust=1.5, alpha=.4)
p2
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)
# The diamonds dataset is natively available with R.
# With transparency (right)
p2 <- ggplot(data=df, aes(x=Integrity.of.the.legal.system, group=alliance, colour = alliance)) +
geom_density(adjust=1.5, alpha=.4)
p2
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)
# The diamonds dataset is natively available with R.
# With transparency (right)
p2 <- ggplot(data=df, aes(x=Impartial.courts, group=alliance, colour = alliance)) +
geom_density(adjust=1.5, alpha=.4)
p2
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)
# The diamonds dataset is natively available with R.
# With transparency (right)
p2 <- ggplot(data=df, aes(x=Hours.Regulations, group=alliance, colour = alliance)) +
geom_density(adjust=1.5, alpha=.4)
p2
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)
# The diamonds dataset is natively available with R.
# With transparency (right)
p2 <- ggplot(data=df, aes(x=Government.consumption, group=alliance, colour = alliance)) +
geom_density(adjust=1.5, alpha=.4)
p2
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)
# The diamonds dataset is natively available with R.
# With transparency (right)
p2 <- ggplot(data=df, aes(x=Size.of.Government, group=alliance, colour = alliance)) +
geom_density(adjust=1.5, alpha=.4)
p2
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)
# The diamonds dataset is natively available with R.
# With transparency (right)
p2 <- ggplot(data=df, aes(x=State.ownership.of.assets, group=alliance, colour = alliance)) +
geom_density(adjust=1.5, alpha=.4)
p2
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)
# The diamonds dataset is natively available with R.
# With transparency (right)
p2 <- ggplot(data=df, aes(x=Ownership.of.banks, group=alliance, colour = alliance)) +
geom_density(adjust=1.5, alpha=.4)
p2
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)
# The diamonds dataset is natively available with R.
# With transparency (right)
p2 <- ggplot(data=df, aes(x=Judicial.independence, group=alliance, colour = alliance)) +
geom_density(adjust=1.5, alpha=.4)
p2
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)
# The diamonds dataset is natively available with R.
# With transparency (right)
p2 <- ggplot(data=df, aes(x=Impartial.courts, group=alliance, colour = alliance)) +
geom_density(adjust=1.5, alpha=.4)
p2
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)
# The diamonds dataset is natively available with R.
# With transparency (right)
p2 <- ggplot(data=df, aes(x=Integrity.of.the.legal.system, group=alliance, colour = alliance)) +
geom_density(adjust=1.5, alpha=.4)
p2
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)
# The diamonds dataset is natively available with R.
# With transparency (right)
p2 <- ggplot(data=df, aes(x=Ownership.of.banks, group=alliance, colour = alliance)) +
geom_density(adjust=1.5, alpha=.4)
p2
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)
# The diamonds dataset is natively available with R.
# With transparency (right)
p2 <- ggplot(data=df, aes(x=Legal.enforcement.of.contracts, group=alliance, colour = alliance)) +
geom_density(adjust=1.5, alpha=.4)
p2
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)
# The diamonds dataset is natively available with R.
# With transparency (right)
p2 <- ggplot(data=df, aes(x=Impartial.Public.Administration, group=alliance, colour = alliance)) +
geom_density(adjust=1.5, alpha=.4)
p2
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)
# The diamonds dataset is natively available with R.
# With transparency (right)
p2 <- ggplot(data=df, aes(x=Freedom.to.own.foreign.currency.bank.accounts, group=alliance, colour = alliance)) +
geom_density(adjust=1.5, alpha=.4)
p2
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)
# The diamonds dataset is natively available with R.
# With transparency (right)
p2 <- ggplot(data=df, aes(x=Impartial.courts, group=alliance, colour = alliance)) +
geom_density(adjust=1.5, alpha=.4)
p2
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)
# The diamonds dataset is natively available with R.
# With transparency (right)
p2 <- ggplot(data=df, aes(x=Sound.Money, group=alliance, colour = alliance)) +
geom_density(adjust=1.5, alpha=.4)
p2
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)
# The diamonds dataset is natively available with R.
# With transparency (right)
p2 <- ggplot(data=df, aes(x=Freedom.to.trade.Internationally, group=alliance, colour = alliance)) +
geom_density(adjust=1.5, alpha=.4)
p2
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)
# The diamonds dataset is natively available with R.
# With transparency (right)
p2 <- ggplot(data=df, aes(x=libdem_vdem_owid, group=alliance, colour = alliance)) +
geom_density(adjust=1.5, alpha=.4)
p2
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)
# The diamonds dataset is natively available with R.
# With transparency (right)
p2 <- ggplot(data=df, aes(x=Judicial.independence, group=alliance, colour = alliance)) +
geom_density(adjust=1.5, alpha=.4)
p2
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)
# The diamonds dataset is natively available with R.
# With transparency (right)
p2 <- ggplot(data=df, aes(x=indiv_libs_vdem_owid, group=alliance, colour = alliance)) +
geom_density(adjust=1.5, alpha=.4)
p2
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)
# The diamonds dataset is natively available with R.
# With transparency (right)
p2 <- ggplot(data=df, aes(x=electdem_vdem_owid, group=alliance, colour = alliance)) +
geom_density(adjust=1.5, alpha=.4)
p2
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)
# The diamonds dataset is natively available with R.
# With transparency (right)
p2 <- ggplot(data=df, aes(x=Controls.of.the.movement.of.capital.and.people, group=alliance, colour = alliance)) +
geom_density(adjust=1.5, alpha=.4)
p2
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)
# The diamonds dataset is natively available with R.
# With transparency (right)
p2 <- ggplot(data=df, aes(x=libdem_vdem_owid, group=alliance, colour = alliance)) +
geom_density(adjust=1.5, alpha=.4)
p2
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)
# The diamonds dataset is natively available with R.
# With transparency (right)
p2 <- ggplot(data=df, aes(x=Gender.Legal.Rights.Adjustment, group=alliance, colour = alliance)) +
geom_density(adjust=1.5, alpha=.4)
p2
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)
# The diamonds dataset is natively available with R.
# With transparency (right)
p2 <- ggplot(data=df, aes(x=Interest.rate.controls.negative.real.interest.rates., group=alliance, colour = alliance)) +
geom_density(adjust=1.5, alpha=.4)
p2
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)
# The diamonds dataset is natively available with R.
# With transparency (right)
p2 <- ggplot(data=df, aes(x=Sound.Money, group=alliance, colour = alliance)) +
geom_density(adjust=1.5, alpha=.4)
p2
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)
# The diamonds dataset is natively available with R.
# With transparency (right)
p2 <- ggplot(data=df, aes(x=Financial.Openness, group=alliance, colour = alliance)) +
geom_density(adjust=1.5, alpha=.4)
p2
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)
# The diamonds dataset is natively available with R.
# With transparency (right)
p2 <- ggplot(data=df, aes(x=Government.consumption, group=alliance, colour = alliance)) +
geom_density(adjust=1.5, alpha=.4)
p2
plot(df$libdem_vdem_owid,df$Ownership.of.banks)
plot(df$Ownership.of.banks,df$libdem_vdem_owid)
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)
# The diamonds dataset is natively available with R.
# With transparency (right)
p2 <- ggplot(data=df, aes(x=Regulation, group=alliance, colour = alliance)) +
geom_density(adjust=1.5, alpha=.4)
p2
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)
# The diamonds dataset is natively available with R.
# With transparency (right)
p2 <- ggplot(data=df, aes(x=Regulation, group=alliance, colour = alliance)) +
geom_density(adjust=1.5, alpha=.4)
p2
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)
# The diamonds dataset is natively available with R.
# With transparency (right)
p2 <- ggplot(data=df, aes(x=Freedom.to.trade.Internationally
, group=alliance, colour = alliance)) +
geom_density(adjust=1.5, alpha=.4)
p2
df <- read.csv("V-Dem_Frasier_data_1970.csv")
colnames(df)
df = subset(df, select = -c(Unnamed..0, Entity,X,Year,Countries,Economic.Freedom.Summary.Index,Rank,Quartile,data,data.1,data.2,data.3,data.4,data.5,data.6,data.7,data.8,data.9,data.10))
df = subset(df, select = -c(lib_dich_row_owid,Top.marginal.income.tax.rate,Top.marginal.income.and.payroll.tax.rate,Top.marginal.tax.rate,Protection.of.property.rights,Military.interference.in.rule.of.law.and.politics,Regulatory.restrictions.on.the.sale.of.real.property,Reliability.of.police,Standard.deviation.of.tariff.rates,Non.tariff.trade.barriers,Compliance.costs.of.importing.and.exporting,Regulatory.trade.barriers,Freedom.of.foreigners.to.visit,Hiring.regulations.and.minimum.wage,Hiring.and.firing.regulations,Mandated.cost.of.worker.dismissal,Administrative.requirements,Regulatory.Burden,Starting.a.business,Licensing.restrictions,Tax.compliance,Business.regulations))
df = subset(df, select = -c(ISO_Code))
library('missMDA')
estim_ncpPCA(df, scale=T)
imputePCA(df,ncp=5)
df = subset(df, select = -c(Mean.tariff.rate))
estim_ncpPCA(df, scale=T)
library('missMDA')
df_impute<-imputePCA(df,ncp=5)
test<-PCA(df_impute$completeObs)
#pacif (!require("devtools")) install.packages("devtools")
library('devtools')
install_github("husson/missMDA")
df <- read.csv("V-Dem_Frasier_data_1970.csv")
colnames(df)
df = subset(df, select = -c(Unnamed..0, Entity,X,Year,Countries,Economic.Freedom.Summary.Index,Rank,Quartile,data,data.1,data.2,data.3,data.4,data.5,data.6,data.7,data.8,data.9,data.10))
df = subset(df, select = -c(lib_dich_row_owid,Top.marginal.income.tax.rate,Top.marginal.income.and.payroll.tax.rate,Top.marginal.tax.rate,Protection.of.property.rights,Military.interference.in.rule.of.law.and.politics,Regulatory.restrictions.on.the.sale.of.real.property,Reliability.of.police,Standard.deviation.of.tariff.rates,Non.tariff.trade.barriers,Compliance.costs.of.importing.and.exporting,Regulatory.trade.barriers,Freedom.of.foreigners.to.visit,Hiring.regulations.and.minimum.wage,Hiring.and.firing.regulations,Mandated.cost.of.worker.dismissal,Administrative.requirements,Regulatory.Burden,Starting.a.business,Licensing.restrictions,Tax.compliance,Business.regulations))
df = subset(df, select = -c(ISO_Code))
library('missMDA')
estim_ncpPCA(df, scale=T)
imputePCA(df,ncp=5)
df = subset(df, select = -c(Mean.tariff.rate))
library('missMDA')
df_impute<-imputePCA(df,ncp=5)
test<-PCA(df_impute$completeObs)
estim_ncpPCA(df, scale=T)
df_fittedX <- data.frame(df_impute$fittedX)
df_completeObs <- data.frame(df_impute$completeObs)
library(missMDA)
library(FactoMineR)
pca_analysis<-PCA(df_impute$completeObs)
variable_coordinates<-data.frame(pca_analysis$var$coord)
loadings<-sweep(pca_analysis$var$coord,2,sqrt(pca_analysis$eig[1:5,1]),FUN="/")
pca_analysis$eig
library('factoextra')
fviz_screeplot(pca_analysis, choice = c("eigenvalue"), ncp=10)
fviz_screeplot(pca_analysis, ncp=10)
View(df)
df = subset(df, select = -c(indiv_libs_vdem_owid,electdem_vdem_owid,libdem_vdem_owid))
df = subset(df, select = -c(indiv_libs_vdem_owid,electdem_vdem_owid,libdem_vdem_owid))
df_impute<-imputePCA(df,ncp=5)
df_fittedX <- data.frame(df_impute$fittedX)
df_completeObs <- data.frame(df_impute$completeObs)
pca_analysis<-PCA(df_impute$completeObs)
variable_coordinates<-data.frame(pca_analysis$var$coord)
loadings<-sweep(pca_analysis$var$coord,2,sqrt(pca_analysis$eig[1:5,1]),FUN="/")
fviz_screeplot(pca_analysis, choice = c("eigenvalue"), ncp=10)
fviz_screeplot(pca_analysis, ncp=10)
df<-read.csv("V-Dem_Frasier_data_1970_alliances.csv")
df$alliance <- as.factor(df$alliance)
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)
# The diamonds dataset is natively available with R.
# With transparency (right)
p2 <- ggplot(data=df, aes(x=Freedom.to.trade.Internationally
, group=alliance, colour = alliance)) +
geom_density(adjust=1.5, alpha=.4)
p2
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)
# The diamonds dataset is natively available with R.
# With transparency (right)
p2 <- ggplot(data=df, aes(x=Economic.Freedom.Summary.Index
, group=alliance, colour = alliance)) +
geom_density(adjust=1.5, alpha=.4)
p2
library("dplyr")
main_df <- read.csv("Frasier_Vdem_regime&alliance.csv")
main_df = subset(main_df, select = -c(X,Unnamed..0_x,Unnamed..0_x.1,Unnamed..0.1,Year,Rank,Quartile,data,data.1,data.2,data.3,data.4,data.5,data.6,data.7,data.8,data.9,data.10))
main_df = subset(main_df, select = -c(lib_dich_row_owid,Top.marginal.income.tax.rate,Top.marginal.income.and.payroll.tax.rate,Top.marginal.tax.rate,Protection.of.property.rights,Military.interference.in.rule.of.law.and.politics,Regulatory.restrictions.on.the.sale.of.real.property,Reliability.of.police,Standard.deviation.of.tariff.rates,Non.tariff.trade.barriers,Compliance.costs.of.importing.and.exporting,Regulatory.trade.barriers,Freedom.of.foreigners.to.visit,Hiring.regulations.and.minimum.wage,Hiring.and.firing.regulations,Mandated.cost.of.worker.dismissal,Administrative.requirements,Regulatory.Burden,Starting.a.business,Licensing.restrictions,Tax.compliance,Business.regulations,ISO_Code,Mean.tariff.rate))
main_df = subset(main_df, select = -c(Unnamed..0_y.1,Unnamed..0_y,country,democracy,monarchy))
main_df$alliance<-as.factor(main_df$alliance)
main_df$regimenarrowcat<-as.factor(main_df$regimenarrowcat)
main_df<-main_df %>% mutate(Regime_type = recode(regimenarrowcat,
"0" = "Democracy",
"1" = "Democracy",
"2" = "Democracy",
"3" = "Monarchy",
"8" = "Monarchy",
"9"= "Monarchy",
"4"= "Single-party rule",
"5"="Multi-party authoritarian rule",
"6"="Personalist rule",
"7"="Military rule",
"10" ="Other oligarchy",
"99" = "unknown"))
main_df$Regime_type[is.na(main_df$Regime_type)] <- "unknown"
#main_df %>% dplyr::mutate(Regime_type = replace_na(Regime_type, "unknown"))
#make this example reproducible
set.seed(1)
#create ID column
main_df$id <- 1:nrow(main_df)
#use 85% of dataset as training set and 15% as test set
train <- main_df %>% dplyr::sample_frac(0.85)
test  <- dplyr::anti_join(main_df, train, by = 'id')
train_countries = subset(train, select = c(Entity,Countries))
test_countries = subset(test, select = c(Entity,Countries))
train = subset(train, select = -c(Entity,Countries))
test = subset(test, select = -c(Entity,Countries))
library('missMDA')
train_impute<-imputePCA(train[c(1:37)],ncp=5)
train[c(1:37)] <- data.frame(train_impute$completeObs)
test_impute<-imputePCA(test[c(1:37)],ncp=5)
test[c(1:37)] <- data.frame(test_impute$completeObs)
full_model<-glm(alliance~libdem_vdem_owid+Economic.Freedom.Summary.Index,
family=binomial,data=train)
full_model
full_model<-glm(alliance~libdem_vdem_owid+Economic.Freedom.Summary.Index,
family=binomial,data=train)
summary(full_model)
lib_model<-glm(alliance~libdem_vdem_owid,
family=binomial,data=train)
dem_model<-glm(alliance~electdem_vdem_owid,
family=binomial,data=train)
summary(lib_model)
summary(dem_model)
probabilities <- dem_model %>% predict(test, type = "response")
democratic_model <- ifelse(probabilities > 0.5, 1, 0)
table(test$alliance, democratic_model)
probabilities <- dem_model %>% predict(test, type = "response")
democratic_model <- ifelse(probabilities > 0.5, 1, 0)
table(test$alliance, democratic_model)
probabilities <- lib_model %>% predict(test, type = "response")
liberal_model <- ifelse(probabilities > 0.5, 1, 0)
table(test$alliance, liberal_model)
update.packages(checkBuilt =TRUE, ask = FALSE)
install.packages('xfun')
install.packages("xfun")
full_model<-glm(alliance~Economic.Freedom.Summary.Index+libdem_vdem_owid,
family=binomial,data=train)
full_model
full_model<-glm(alliance~Economic.Freedom.Summary.Index+libdem_vdem_owid,
family=binomial,data=train)
summary(full_model)
smart_tree2 <- rpart(alliance~libdem_vdem_owid+Ownership.of.banks+Government.consumption,data = train, method ="class",control = list(maxdepth = 4))
library("dplyr")
View(main_df)
main_df <- read.csv("Frasier_Vdem_regime&alliance.csv")
main_df = subset(main_df, select = -c(X,Unnamed..0_x,Unnamed..0_x.1,Unnamed..0.1,Year,Rank,Quartile,data,data.1,data.2,data.3,data.4,data.5,data.6,data.7,data.8,data.9,data.10))
main_df = subset(main_df, select = -c(lib_dich_row_owid,Top.marginal.income.tax.rate,Top.marginal.income.and.payroll.tax.rate,Top.marginal.tax.rate,Protection.of.property.rights,Military.interference.in.rule.of.law.and.politics,Regulatory.restrictions.on.the.sale.of.real.property,Reliability.of.police,Standard.deviation.of.tariff.rates,Non.tariff.trade.barriers,Compliance.costs.of.importing.and.exporting,Regulatory.trade.barriers,Freedom.of.foreigners.to.visit,Hiring.regulations.and.minimum.wage,Hiring.and.firing.regulations,Mandated.cost.of.worker.dismissal,Administrative.requirements,Regulatory.Burden,Starting.a.business,Licensing.restrictions,Tax.compliance,Business.regulations,ISO_Code,Mean.tariff.rate))
main_df = subset(main_df, select = -c(Unnamed..0_y.1,Unnamed..0_y,country,democracy,monarchy))
main_df$alliance<-as.factor(main_df$alliance)
main_df$regimenarrowcat<-as.factor(main_df$regimenarrowcat)
main_df<-main_df %>% mutate(Regime_type = recode(regimenarrowcat,
"0" = "Democracy",
"1" = "Democracy",
"2" = "Democracy",
"3" = "Monarchy",
"8" = "Monarchy",
"9"= "Monarchy",
"4"= "Single-party rule",
"5"="Multi-party authoritarian rule",
"6"="Personalist rule",
"7"="Military rule",
"10" ="Other oligarchy",
"99" = "unknown"))
main_df$Regime_type[is.na(main_df$Regime_type)] <- "unknown"
#main_df %>% dplyr::mutate(Regime_type = replace_na(Regime_type, "unknown"))
#make this example reproducible
set.seed(1)
#create ID column
main_df$id <- 1:nrow(main_df)
#use 85% of dataset as training set and 15% as test set
train <- main_df %>% dplyr::sample_frac(0.85)
test  <- dplyr::anti_join(main_df, train, by = 'id')
train_countries = subset(train, select = c(Entity,Countries))
test_countries = subset(test, select = c(Entity,Countries))
train = subset(train, select = -c(Entity,Countries))
test = subset(test, select = -c(Entity,Countries))
library('missMDA')
train_impute<-imputePCA(train[c(1:37)],ncp=5)
train[c(1:37)] <- data.frame(train_impute$completeObs)
test_impute<-imputePCA(test[c(1:37)],ncp=5)
test[c(1:37)] <- data.frame(test_impute$completeObs)
library("rpart")
library("rpart.plot")
smart_tree <- rpart(alliance~Regime_type+Ownership.of.banks+Government.consumption,data = train, method ="class")
rpart.plot(smart_tree)
prp(smart_tree)
smart_tree2 <- rpart(alliance~libdem_vdem_owid+Ownership.of.banks+Government.consumption,data = train, method ="class",control = list(maxdepth = 4))
rpart.plot(smart_tree2)
prp(smart_tree2)
smart_tree2 <- rpart(alliance~libdem_vdem_owid+Ownership.of.banks+Government.consumption,data = train, method ="class",control = list(maxdepth = 3))
rpart.plot(smart_tree2)
prp(smart_tree2)
smart_tree_predictions2 = predict(smart_tree2, newdata = test, type = "class")
confusionMatrix(table(test$alliance, smart_tree_predictions2))
library('caret')
smart_tree_predictions = predict(smart_tree, data = train, type = "class")
confusionMatrix(table(train$alliance, smart_tree_predictions))
#table(train$alliance, smart_tree_predictions)
econ_tree_predictions = predict(econ_tree, data = train,type = "class")
smart_tree_predictions2 = predict(smart_tree2, newdata = test, type = "class")
confusionMatrix(table(test$alliance, smart_tree_predictions2))
